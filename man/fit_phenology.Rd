% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_phenology.R
\name{fit_phenology}
\alias{fit_phenology}
\title{Fit the phenology parameters to timeseries of counts.}
\usage{
fit_phenology(
  data = file.choose(),
  fitted.parameters = NULL,
  fixed.parameters = NULL,
  tol = 1e-06,
  zero_counts = TRUE,
  store.intermediate = FALSE,
  file.intermediate = "Intermediate.rda",
  hessian = TRUE,
  silent = FALSE,
  cofactors = NULL,
  add.cofactors = NULL,
  zero = 1e-09,
  lower = 0,
  upper = Inf,
  stop.fit = FALSE,
  control = list(trace = 1, REPORT = 1, maxit = 1000),
  method = c("Nelder-Mead", "L-BFGS-B")
)
}
\arguments{
\item{data}{A dataset generated by add_format}

\item{fitted.parameters}{Set of parameters to be fitted}

\item{fixed.parameters}{Set of fixed parameters}

\item{tol}{Tolerance of recurrence for dSnbinom() used for convolution of negative binomial distribution}

\item{zero_counts}{example c(TRUE, TRUE, FALSE) indicates whether the zeros have 
been recorded for each of these timeseries. Defaut is TRUE for all.}

\item{store.intermediate}{TRUE or FALSE to save the intermediates}

\item{file.intermediate}{Name of the file where to save the intermediates as a list}

\item{hessian}{If FALSE does not estimate se of parameters}

\item{silent}{If TRUE does not show any message}

\item{cofactors}{data.frame with a column Date and a column for each cofactor}

\item{add.cofactors}{Names of the column of parameter cofactors to use as a cofactor}

\item{zero}{If the theoretical nest number is under this value, this value will be used}

\item{lower}{Lower bound for each parameter}

\item{upper}{Upper bound for each parameter}

\item{stop.fit}{If TRUE, will stop search for parameters even if not ML}

\item{control}{List for control parameters for optim}

\item{method}{Method used by optim. Several can be setup.}
}
\value{
Return a list of with data and result
}
\description{
Function of the package phenology to fit parameters to timeseries.\cr
To fit data, the syntax is :\cr
Result <- fit_phenology(data=dataset, fitted.parameters=par, fixed.parameters=pfixed, trace=1, zero_counts=TRUE, hessian=TRUE)\cr
or if no parameter is fixed :\cr
Result <- fit_phenology(data=dataset, fitted.parameters=par)\cr
Add trace=1 [default] to have information on the fit progression or trace=0 to hide information on the fit progression.\cr
zero_counts = c(TRUE, TRUE, FALSE) indicates whether the zeros have been recorded for each of these timeseries. 
Defaut is TRUE for all. If a named vector zero_counts is used, the names indicate the timeseries.\cr
hessian = FALSE does not estimate Hessian matrix and SE of parameters.\cr
If the parameter Theta is fixed to +Inf, a Poissonian model of daily nest distribution is implemented.\cr
Special section about cofactors:\cr
cofactors must be a data.frame with a column Date and a column for each cofactor\cr
add.cofactors are the names of the column of parameter cofactors to use as a cofactor;\cr
The model is then: parameter[add.cofactors] * cofactor[, add.cofactors]\cr
If the name of the parameter is paste0(add.cofactors, "multi"), then the model is:\cr
parameter[paste0(add.cofactors, "multi")] * cofactor[, add.cofactors] * 
       (number of nests without cofactor)\cr
About parallel computing:\cr
Set options mc.cores and forking to tell what sort of parallel computing\cr
Example:\cr
options(mc.cores = detectCores())
options(forking = FALSE)
}
\details{
fit_phenology fits parameters to timeseries.
}
\examples{
\dontrun{
library(phenology)
# Read a file with data
data(Gratiot)
# Generate a formatted list nammed data_Gratiot 
data_Gratiot <- add_phenology(Gratiot, name="Complete", 
		reference=as.Date("2001-01-01"), format="\%d/\%m/\%Y")
# Generate initial points for the optimisation
parg <- par_init(data_Gratiot, fixed.parameters=NULL)
# Run the optimisation
result_Gratiot <- fit_phenology(data=data_Gratiot, 
		fitted.parameters=parg, fixed.parameters=NULL)
data(result_Gratiot)
# Plot the phenology and get some stats
output <- plot(result_Gratiot)
# or
output <- summary(result_Gratiot)

# With parametrization based on Girondot 2010
parg <- c('Peak' = 173.52272236775076, 
          'Flat' = 0, 
          'LengthB' = 94.433284359804205, 
          'LengthE' = 64.288485646867329, 
          'Max_Complete' = 32.841568389778033, 
          'PMin' = 1.0368261725650889, 
          'Theta' = 3.5534818927979592)
result_Gratiot_par1 <- fit_phenology(data=data_Gratiot, 
		                    fitted.parameters=parg, fixed.parameters=NULL)
# With new parametrization based on Omeyer et al. (In prep)
parg <- result_Gratiot_par1$par
parg <- c(tp=unname(parg["Peak"]), tf=unname(parg["Flat"]), 
          s1=unname(parg["LengthB"])/4.8, s2=unname(parg["LengthE"])/4.8, 
          alpha=unname(parg["Max_Complete"]), Theta=0.66)
result_Gratiot_par2 <- fit_phenology(data=data_Gratiot, 
		                             fitted.parameters=parg, 
		                             fixed.parameters=NULL)
compare_AICc(GirondotModel=result_Gratiot_par1, 
             OmeyerModel=result_Gratiot_par2)
plot(result_Gratiot_par1)
plot(result_Gratiot_par2)

# Use fit with co-factor

# First extract tide information for that place
td <- tide.info(year=2001, latitude=4.9167, longitude=-52.3333, tz="America/Cayenne")
# I keep only High tide level
td2 <- td[td$Tide=="High Tide", ]
# I get the date
td3 <- cbind(td2, Date=as.Date(td2$Date.Time))
td4 <- td3[(as.POSIXlt(td3$Date.Time)$hou<10) | (as.POSIXlt(td3$Date.Time)$hou>15), ]
td5 <- aggregate(x=td4[, c("Date", "Date.Time", "Level")], 
                 by=list(Date=td4[, "Date"]), FUN=max)[, 2:4]
with(td5, plot(Date.Time, Level, type="l"))
td6 <- td5[, c("Date", "Level")]
parg <- par_init(data_Gratiot, fixed.parameters=NULL, add.cofactors="Level")
result_Gratiot_CF <- fit_phenology(data=data_Gratiot, 
		fitted.parameters=parg, fixed.parameters=NULL, cofactors=td6, 
		add.cofactors="Level")
compare_AIC(WithoutCF=result_Gratiot, WithCF=result_Gratiot_CF)
plot(result_Gratiot_CF)

parg <- par_init(data_Gratiot, fixed.parameters=NULL, add.cofactors="Levelmulti")
result_Gratiot_CF2 <- fit_phenology(data=data_Gratiot, 
		fitted.parameters=parg, fixed.parameters=NULL, cofactors=td6, 
		add.cofactors="Level")
compare_AIC(WithoutCF=result_Gratiot, WithCF2=result_Gratiot_CF2)
plot(result_Gratiot_CF2)

# Example with two series fitted with different peaks but same Length of season

Gratiot2 <- Gratiot
Gratiot2[, 2] <- floor(Gratiot2[, 2]*runif(n=nrow(Gratiot2)))
data_Gratiot <- add_phenology(Gratiot, name="Complete1",
                              reference=as.Date("2001-01-01"), format="\%d/\%m/\%Y")
data_Gratiot <- add_phenology(Gratiot2, name="Complete2",
                              reference=as.Date("2001-01-01"), 
                              format="\%d/\%m/\%Y", previous=data_Gratiot)
pfixed=c(Min=0)
p <- par_init(data_Gratiot, fixed.parameters = pfixed)
p <- c(p, Peak_Complete1=175, Peak_Complete2=175)
p <- p[-4]
p <- c(p, Length=90)
p <- p[-(3:4)]
result_Gratiot <- fit_phenology(data=data_Gratiot, fitted.parameters=p, 
fixed.parameters=pfixed)

# An example with bimodality

g <- Gratiot
g[30:60, 2] <- sample(10:20, 31, replace = TRUE)
data_g <- add_phenology(g, name="Complete", reference=as.Date("2001-01-01"), 
                        format="\%d/\%m/\%Y")
parg <- c('Max.1_Complete' = 5.6344636692341856, 
          'MinB.1_Complete' = 0.15488810581002324, 
          'MinE.1_Complete' = 0.2, 
          'LengthB.1' = 22.366647176407636, 
          'Peak.1' = 47.902473939250036, 
          'LengthE.1' = 17.828495918533015, 
          'Max.2_Complete' = 33.053364083447434, 
          'MinE.2_Complete' = 0.42438173496989717, 
          'LengthB.2' = 96.651564706802702, 
          'Peak.2' = 175.3451874571835, 
          'LengthE.2' = 62.481968743789835, 
          'Theta' = 3.6423908093342572)
pfixed <- c('MinB.2_Complete' = 0, 
          'Flat.1' = 0, 
          'Flat.2' = 0)
result_g <- fit_phenology(data=data_g, fitted.parameters=p0, fixed.parameters=pfixed)
plot(result_g)
}
}
\seealso{
Other Phenology model: 
\code{\link{AutoFitPhenology}()},
\code{\link{BE_to_LBLE}()},
\code{\link{Gratiot}},
\code{\link{LBLE_to_BE}()},
\code{\link{LBLE_to_L}()},
\code{\link{L_to_LBLE}()},
\code{\link{MarineTurtles_2002}},
\code{\link{MinBMinE_to_Min}()},
\code{\link{adapt_parameters}()},
\code{\link{add_SE}()},
\code{\link{add_phenology}()},
\code{\link{extract_result}()},
\code{\link{likelihood_phenology}()},
\code{\link{logLik.phenology}()},
\code{\link{map_Gratiot}},
\code{\link{map_phenology}()},
\code{\link{par_init}()},
\code{\link{phenology2fitRMU}()},
\code{\link{phenology_MHmcmc_p}()},
\code{\link{phenology_MHmcmc}()},
\code{\link{phenology}()},
\code{\link{plot.phenologymap}()},
\code{\link{plot.phenology}()},
\code{\link{plot_delta}()},
\code{\link{plot_phi}()},
\code{\link{print.phenologymap}()},
\code{\link{print.phenologyout}()},
\code{\link{print.phenology}()},
\code{\link{remove_site}()},
\code{\link{result_Gratiot1}},
\code{\link{result_Gratiot2}},
\code{\link{result_Gratiot_Flat}},
\code{\link{result_Gratiot_mcmc}},
\code{\link{result_Gratiot}},
\code{\link{summary.phenologymap}()},
\code{\link{summary.phenologyout}()},
\code{\link{summary.phenology}()}
}
\author{
Marc Girondot \email{marc.girondot@gmail.com}
}
\concept{Phenology model}
